generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model user {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  email        String    @unique
  password     String?
  phone        String?
  profileImage String?
  googleId     String?
  role         role      @default(USER)
  isActive     Boolean   @default(true)
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  order        order[]
  address      address[]
}

model address {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  address      String
  city         String
  pincode      String
  country      String
  addresssType addressType @default(SHIPPING)
  user         user        @relation(fields: [userId], references: [id])
  userId       String      @db.ObjectId
}

enum addressType {
  BILLING
  SHIPPING
}

enum role {
  SUPERADMIN
  ADMIN
  USER
}

model category {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  categoryName  String
  categoryImage String?
  parentId      String?    @db.ObjectId
  parent        category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      category[] @relation("CategoryHierarchy")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      product[]  @relation(fields: [productIds], references: [id])
  productIds    String[]   @db.ObjectId
}

model product {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  productName      String
  shortDescription String
  longDescription  String
  mainImage        String
  galleryImages    String[]
  price            Float
  sellingPrice     Float
  quantity         Int
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  categories       category[]        @relation(fields: [categoryIds], references: [id])
  categoryIds      String[]          @db.ObjectId
  orders           productsInOrder[]
}

model productsInOrder {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  order     order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId

  @@unique([productId, orderId])
}

model order {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  user           user              @relation(fields: [userId], references: [id])
  userId         String            @db.ObjectId
  orderItemIds   productsInOrder[]
  orderStatus    String            @default("pending")
  totalPrice     Float
  orderDate      DateTime          @default(now())
  transactionIId String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}
